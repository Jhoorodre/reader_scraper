#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Comandos CLI para uso em linha de comando
"""

import sys
import argparse
import logging
import json
from typing import Optional, Dict, Any

from services.sync.manager import SyncManager
from services.file.scanner import FileScanner
from models.sync_models import SyncConfig
from utils.config import config_manager


class CLICommands:
    """Comandos CLI para automa√ß√£o e scripts"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def sync(self, path: str, token: Optional[str] = None, 
             max_uploads: int = 5, retry_attempts: int = 3, 
             timeout: int = 30, quiet: bool = False) -> int:
        """
        Comando de sincroniza√ß√£o
        
        Args:
            path: Caminho do diret√≥rio
            token: Token BuzzHeavier (opcional se j√° configurado)
            max_uploads: Upload simult√¢neos
            retry_attempts: Tentativas de retry
            timeout: Timeout em segundos
            quiet: Modo silencioso
            
        Returns:
            0 para sucesso, 1 para erro
        """
        try:
            # Configura logging
            if quiet:
                logging.basicConfig(level=logging.ERROR)
            else:
                logging.basicConfig(level=logging.INFO, 
                                  format='%(asctime)s - %(levelname)s - %(message)s')
            
            # Obt√©m configura√ß√£o
            config = config_manager.get_sync_config()
            
            # Atualiza com par√¢metros fornecidos
            if token:
                config.buzzheavier_token = token
            config.max_concurrent_uploads = max_uploads
            config.retry_attempts = retry_attempts
            config.timeout_seconds = timeout
            
            if not config.buzzheavier_token:
                print("‚ùå Token BuzzHeavier obrigat√≥rio", file=sys.stderr)
                return 1
            
            if not quiet:
                print(f"üöÄ Iniciando sincroniza√ß√£o: {path}")
                print(f"‚öôÔ∏è Configura√ß√£o: {max_uploads} uploads, {retry_attempts} tentativas")
            
            # Executa sincroniza√ß√£o
            with SyncManager(config) as sync_manager:
                result = sync_manager.start_sync(path)
                
                if result['success']:
                    stats = result['stats']
                    if not quiet:
                        print(f"‚úÖ Sincroniza√ß√£o conclu√≠da!")
                        print(f"üìä Uploaded: {stats['uploaded_files']}, "
                              f"Pulados: {stats['skipped_files']}, "
                              f"Falhas: {stats['failed_files']}")
                    return 0
                else:
                    print(f"‚ùå Erro: {result['error']}", file=sys.stderr)
                    return 1
        
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}", file=sys.stderr)
            self.logger.error(f"Erro no comando sync: {e}", exc_info=True)
            return 1
    
    def scan(self, path: str, format_output: str = 'text', 
             show_sample: bool = False) -> int:
        """
        Comando de escaneamento
        
        Args:
            path: Caminho do diret√≥rio
            format_output: Formato de sa√≠da (text, json)
            show_sample: Mostrar amostra de arquivos
            
        Returns:
            0 para sucesso, 1 para erro
        """
        try:
            scanner = FileScanner()
            
            # Escaneia diret√≥rio
            directory_structure = scanner.scan_directory(path)
            valid_structures = scanner.find_valid_files(path)
            
            if format_output == 'json':
                result = {
                    'path': directory_structure.root_path,
                    'total_files': directory_structure.total_files,
                    'valid_files': len(valid_structures),
                    'total_size': directory_structure.total_size,
                    'files_by_extension': directory_structure.files_by_extension,
                    'hierarchy_levels': directory_structure.hierarchy_levels
                }
                
                if show_sample and valid_structures:
                    result['sample_files'] = [
                        {
                            'agregador': s.agregador,
                            'scan': s.scan,
                            'serie': s.serie,
                            'capitulo': s.capitulo,
                            'arquivo': s.arquivo,
                            'caminho_remoto': s.get_caminho_remoto()
                        }
                        for s in valid_structures[:10]
                    ]
                
                print(json.dumps(result, indent=2, ensure_ascii=False))
            
            else:  # text format
                print(f"üìÅ Diret√≥rio: {directory_structure.root_path}")
                print(f"üìÑ Total de arquivos: {directory_structure.total_files}")
                print(f"‚úÖ Arquivos v√°lidos: {len(valid_structures)}")
                print(f"üíæ Tamanho total: {self._format_size(directory_structure.total_size)}")
                print(f"üìÇ Diret√≥rios: {len(directory_structure.directories)}")
                
                if directory_structure.files_by_extension:
                    print("\nüìã Extens√µes:")
                    for ext, count in directory_structure.files_by_extension.items():
                        print(f"   {ext}: {count}")
                
                print(f"\nüóÇÔ∏è Hierarquia: {' > '.join(directory_structure.hierarchy_levels)}")
                
                if show_sample and valid_structures:
                    print(f"\nüìã Amostra (primeiros 10):")
                    for i, s in enumerate(valid_structures[:10], 1):
                        print(f"  {i:2d}. {s.get_caminho_remoto()}/{s.arquivo}")
            
            return 0
        
        except Exception as e:
            print(f"‚ùå Erro no scan: {e}", file=sys.stderr)
            return 1
    
    def status(self, format_output: str = 'text') -> int:
        """
        Comando de status
        
        Args:
            format_output: Formato de sa√≠da (text, json)
            
        Returns:
            0 para sucesso, 1 para erro
        """
        try:
            config = config_manager.get_sync_config()
            
            with SyncManager(config) as sync_manager:
                status = sync_manager.get_status()
                stats = sync_manager.stats_manager.get_current_stats()
                failed_files = sync_manager.state_manager.get_failed_files()
                
                if format_output == 'json':
                    result = {
                        'status': status,
                        'stats': stats,
                        'failed_files_count': len(failed_files),
                        'has_token': bool(config.buzzheavier_token)
                    }
                    print(json.dumps(result, indent=2, ensure_ascii=False))
                
                else:  # text format
                    print("üìä STATUS DO SISTEMA")
                    print("=" * 30)
                    
                    # Status de execu√ß√£o
                    if status['is_running']:
                        print("üîÑ Status: EM EXECU√á√ÉO")
                        if status['current_operation']:
                            print(f"‚öôÔ∏è Opera√ß√£o: {status['current_operation']}")
                    else:
                        print("‚è∏Ô∏è Status: PARADO")
                    
                    # Configura√ß√£o
                    print(f"\n‚öôÔ∏è CONFIGURA√á√ÉO")
                    print(f"üîë Token: {'‚úÖ Configurado' if config.buzzheavier_token else '‚ùå N√£o configurado'}")
                    print(f"üîÑ Uploads simult√¢neos: {config.max_concurrent_uploads}")
                    print(f"üîÅ Tentativas: {config.retry_attempts}")
                    print(f"‚è±Ô∏è Timeout: {config.timeout_seconds}s")
                    
                    # Estat√≠sticas
                    print(f"\nüìä ESTAT√çSTICAS")
                    print(f"üìÑ Total: {stats['total_files']}")
                    print(f"‚úÖ Uploaded: {stats['uploaded_files']}")
                    print(f"‚è≠Ô∏è Pulados: {stats['skipped_files']}")
                    print(f"‚ùå Falhas: {stats['failed_files']}")
                    
                    if stats['progress_percent'] > 0:
                        print(f"üìà Progresso: {stats['progress_percent']:.1f}%")
                    
                    if stats['elapsed_seconds'] > 0:
                        print(f"‚è±Ô∏è Tempo: {self._format_duration(stats['elapsed_seconds'])}")
                    
                    # Arquivos com falha
                    if failed_files:
                        print(f"\n‚ùå FALHAS PENDENTES: {len(failed_files)}")
            
            return 0
        
        except Exception as e:
            print(f"‚ùå Erro ao obter status: {e}", file=sys.stderr)
            return 1
    
    def retry_failed(self, quiet: bool = False) -> int:
        """
        Comando para reprocessar falhas
        
        Args:
            quiet: Modo silencioso
            
        Returns:
            0 para sucesso, 1 para erro
        """
        try:
            config = config_manager.get_sync_config()
            
            if not config.buzzheavier_token:
                print("‚ùå Token BuzzHeavier obrigat√≥rio", file=sys.stderr)
                return 1
            
            with SyncManager(config) as sync_manager:
                failed_files = sync_manager.state_manager.get_failed_files()
                
                if not failed_files:
                    if not quiet:
                        print("‚úÖ Nenhum arquivo para reprocessar")
                    return 0
                
                if not quiet:
                    print(f"üîÑ Reprocessando {len(failed_files)} arquivos...")
                
                result = sync_manager.retry_failed_files()
                
                if result['success']:
                    upload_result = result.get('result', {})
                    if not quiet:
                        print(f"‚úÖ Reprocessamento conclu√≠do!")
                        print(f"üìä Uploaded: {upload_result.get('uploaded', 0)}, "
                              f"Pulados: {upload_result.get('skipped', 0)}, "
                              f"Falhas: {upload_result.get('failed', 0)}")
                    return 0
                else:
                    print(f"‚ùå Erro: {result['error']}", file=sys.stderr)
                    return 1
        
        except Exception as e:
            print(f"‚ùå Erro no reprocessamento: {e}", file=sys.stderr)
            return 1
    
    def config(self, action: str, key: Optional[str] = None, 
               value: Optional[str] = None) -> int:
        """
        Comando de configura√ß√£o
        
        Args:
            action: show, set, get
            key: Chave da configura√ß√£o
            value: Valor (para set)
            
        Returns:
            0 para sucesso, 1 para erro
        """
        try:
            config = config_manager.get_sync_config()
            
            if action == 'show':
                print("‚öôÔ∏è CONFIGURA√á√ÉO ATUAL")
                print("=" * 25)
                print(f"üîë Token: {'‚úÖ Configurado' if config.buzzheavier_token else '‚ùå N√£o configurado'}")
                print(f"üîÑ max_concurrent_uploads: {config.max_concurrent_uploads}")
                print(f"üîÅ retry_attempts: {config.retry_attempts}")
                print(f"‚è±Ô∏è timeout_seconds: {config.timeout_seconds}")
                print(f"üì¶ chunk_size: {config.chunk_size}")
                print(f"üîó auto_consolidate: {config.auto_consolidate}")
                
            elif action == 'get':
                if not key:
                    print("‚ùå Chave obrigat√≥ria para 'get'", file=sys.stderr)
                    return 1
                
                if hasattr(config, key):
                    value = getattr(config, key)
                    if key == 'buzzheavier_token' and value:
                        print("‚úÖ Configurado")
                    else:
                        print(value)
                else:
                    print(f"‚ùå Chave desconhecida: {key}", file=sys.stderr)
                    return 1
                
            elif action == 'set':
                if not key or value is None:
                    print("‚ùå Chave e valor obrigat√≥rios para 'set'", file=sys.stderr)
                    return 1
                
                if key == 'buzzheavier_token':
                    config.buzzheavier_token = value
                    print("‚úÖ Token configurado")
                elif key == 'max_concurrent_uploads':
                    config.max_concurrent_uploads = int(value)
                    print(f"‚úÖ max_concurrent_uploads = {value}")
                elif key == 'retry_attempts':
                    config.retry_attempts = int(value)
                    print(f"‚úÖ retry_attempts = {value}")
                elif key == 'timeout_seconds':
                    config.timeout_seconds = int(value)
                    print(f"‚úÖ timeout_seconds = {value}")
                elif key == 'chunk_size':
                    config.chunk_size = int(value)
                    print(f"‚úÖ chunk_size = {value}")
                elif key == 'auto_consolidate':
                    config.auto_consolidate = value.lower() in ['true', '1', 'yes', 'on']
                    print(f"‚úÖ auto_consolidate = {config.auto_consolidate}")
                else:
                    print(f"‚ùå Chave desconhecida: {key}", file=sys.stderr)
                    return 1
                
                # Salva configura√ß√£o
                config_manager.update_sync_config(config)
                
            else:
                print(f"‚ùå A√ß√£o desconhecida: {action}", file=sys.stderr)
                return 1
            
            return 0
        
        except ValueError as e:
            print(f"‚ùå Valor inv√°lido: {e}", file=sys.stderr)
            return 1
        except Exception as e:
            print(f"‚ùå Erro na configura√ß√£o: {e}", file=sys.stderr)
            return 1
    
    def _format_size(self, bytes_size: int) -> str:
        """Formata tamanho em texto leg√≠vel"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if bytes_size < 1024:
                return f"{bytes_size:.1f} {unit}"
            bytes_size /= 1024
        return f"{bytes_size:.1f} TB"
    
    def _format_duration(self, seconds: float) -> str:
        """Formata dura√ß√£o em texto leg√≠vel"""
        if seconds < 60:
            return f"{seconds:.0f}s"
        elif seconds < 3600:
            minutes = seconds / 60
            return f"{minutes:.1f}m"
        else:
            hours = seconds / 3600
            return f"{hours:.1f}h"


def main():
    """Fun√ß√£o principal para comandos CLI"""
    parser = argparse.ArgumentParser(
        description='BuzzHeavier Sync CLI Commands',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos:
  %(prog)s sync /path/to/manga --token YOUR_TOKEN
  %(prog)s scan /path/to/manga --json
  %(prog)s status
  %(prog)s retry-failed
  %(prog)s config show
  %(prog)s config set max_concurrent_uploads 10
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Comandos dispon√≠veis')
    
    # Comando sync
    sync_parser = subparsers.add_parser('sync', help='Sincronizar diret√≥rio')
    sync_parser.add_argument('path', help='Caminho do diret√≥rio')
    sync_parser.add_argument('--token', help='Token BuzzHeavier')
    sync_parser.add_argument('--max-uploads', type=int, default=5, help='Uploads simult√¢neos (padr√£o: 5)')
    sync_parser.add_argument('--retry-attempts', type=int, default=3, help='Tentativas de retry (padr√£o: 3)')
    sync_parser.add_argument('--timeout', type=int, default=30, help='Timeout em segundos (padr√£o: 30)')
    sync_parser.add_argument('--quiet', action='store_true', help='Modo silencioso')
    
    # Comando scan
    scan_parser = subparsers.add_parser('scan', help='Escanear diret√≥rio')
    scan_parser.add_argument('path', help='Caminho do diret√≥rio')
    scan_parser.add_argument('--json', action='store_true', help='Sa√≠da em JSON')
    scan_parser.add_argument('--sample', action='store_true', help='Mostrar amostra de arquivos')
    
    # Comando status
    status_parser = subparsers.add_parser('status', help='Status do sistema')
    status_parser.add_argument('--json', action='store_true', help='Sa√≠da em JSON')
    
    # Comando retry-failed
    retry_parser = subparsers.add_parser('retry-failed', help='Reprocessar falhas')
    retry_parser.add_argument('--quiet', action='store_true', help='Modo silencioso')
    
    # Comando config
    config_parser = subparsers.add_parser('config', help='Configura√ß√£o')
    config_parser.add_argument('action', choices=['show', 'get', 'set'], help='A√ß√£o')
    config_parser.add_argument('key', nargs='?', help='Chave da configura√ß√£o')
    config_parser.add_argument('value', nargs='?', help='Valor (para set)')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return 1
    
    cli = CLICommands()
    
    try:
        if args.command == 'sync':
            return cli.sync(
                path=args.path,
                token=args.token,
                max_uploads=args.max_uploads,
                retry_attempts=args.retry_attempts,
                timeout=args.timeout,
                quiet=args.quiet
            )
        
        elif args.command == 'scan':
            return cli.scan(
                path=args.path,
                format_output='json' if args.json else 'text',
                show_sample=args.sample
            )
        
        elif args.command == 'status':
            return cli.status(
                format_output='json' if args.json else 'text'
            )
        
        elif args.command == 'retry-failed':
            return cli.retry_failed(quiet=args.quiet)
        
        elif args.command == 'config':
            return cli.config(
                action=args.action,
                key=args.key,
                value=args.value
            )
        
        else:
            print(f"‚ùå Comando desconhecido: {args.command}", file=sys.stderr)
            return 1
    
    except KeyboardInterrupt:
        print("\nüö´ Interrompido pelo usu√°rio", file=sys.stderr)
        return 130
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}", file=sys.stderr)
        return 1


if __name__ == '__main__':
    sys.exit(main())